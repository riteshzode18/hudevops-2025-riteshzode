# Code Generated by Sidekick is for learning and experimentation purposes only.
from azure.identity import DefaultAzureCredential
from azure.mgmt.appcontainers import ContainerAppsAPIClient
from azure.mgmt.appcontainers.models import ContainerApp, ContainerAppProperties, Configuration, Ingress, Template, ContainerResources, Container

# Set your Azure subscription ID and resource details
subscription_id = 'your-subscription-id'
resource_group = 'your-resource-group'
location = 'your-location'
container_app_env = 'HU-DevOps-25-CAE'
container_app_name = 'your-container-app-name'
image_name = 'rkishorzodenginx.azurecr.io/nginx-sample:latest' 

# Authenticate using Azure SDK
credential = DefaultAzureCredential()
container_app_client = ContainerAppsAPIClient(credential, subscription_id)

# Create a container app
container_app_properties = ContainerAppProperties(
    configuration=Configuration(
        ingress=Ingress(
            external=True,
            target_port=80
        )
    ),
    template=Template(
        containers=[
            Container(
                name=container_app_name,
                image=image_name,
                resources=ContainerResources(
                    cpu=0.25,
                    memory='0.5Gi'
                )
            )
        ]
    )
)

container_app = ContainerApp(
    location=location,
    properties=container_app_properties
)

try:
    # Create the container app
    poller = container_app_client.container_apps.begin_create_or_update(
        resource_group_name=resource_group,
        container_app_name=container_app_name,
        container_app_envelope=container_app
    )
    result = poller.result()  # Wait for the operation to complete
    print(f'Container app {container_app_name} created in environment {container_app_env}.')
except Exception as e:
    print(f'An error occurred: {e}')
